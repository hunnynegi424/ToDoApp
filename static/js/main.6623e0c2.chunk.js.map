{"version":3,"sources":["components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["Tasks","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createTasks","bind","assertThisInitialized","task","index","_this2","react_default","a","createElement","className","onClick","statusChange","key","title","tasklist","inputs","map","Component","App","state","tasks","taskType","alltask","completedtask","activetask","status","todo","inputTask","value","newTask","isComplete","Date","now","setState","prevState","concat","items","filter","components_Tasks","console","log","type","ref","placeholder","addTask","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6623e0c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass Tasks extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.createTasks = this.createTasks.bind(this);\r\n  }\r\n\r\n  createTasks(task, index)  {\r\n    return <li className= \"listitems\" \r\n    onClick={()=> this.statusChange(index)}\r\n    key={index}>{task.title}</li>}\r\n\r\n    statusChange(index) {\r\n    this.props.statusChange(index);\r\n  }\r\n\r\n  render() {\r\n    var tasklist = this.props.inputs.map(this.createTasks);\r\n    return (\r\n\r\n      <ul  className=\"tasks\">\r\n        {tasklist}\r\n      </ul>\r\n\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Tasks;","import React, { Component } from 'react';\nimport Tasks from './components/Tasks';\n//import AllTask from './components/AllTask';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state= {\n            tasks: [\n            ],\n            taskType: 'all'\n        }\n        this.alltask = this.alltask.bind(this);\n        this.completedtask = this.completedtask.bind(this);\n        this.activetask = this.activetask.bind(this);\n        this.status = this.status.bind(this);\n    }\n\n    addTask(todo) {\n      if(this.inputTask.value !== \"\"){\n        let newTask = {\n          title: this.inputTask.value,\n          isComplete: false,\n          key: Date.now(),\n      } \n      this.setState((prevState) => {\n        return {\n            tasks: prevState.tasks.concat(newTask)\n        };\n      });\n      }\n      this.inputTask.value = \"\";\n    }\n\n    alltask(){\n      var items=this.state.tasks.filter(status => status.isComplete === true || status.isComplete === false)\n      return<div><Tasks inputs={items} statusChange={this.status}/></div>\n    }\n    completedtask(){\n      var items=this.state.tasks.filter(status => status.isComplete === true)          \n      return<div><Tasks inputs={items} statusChange={this.status}/></div>\n    }\n    activetask(){\n      var items=this.state.tasks.filter(status => status.isComplete === false)\n      return<div><Tasks inputs={items} statusChange={this.status}/></div>\n    }\n  \n    status(index){\n      var tasks = this.state.tasks;\n      tasks[index].isComplete = true;\n      console.log(tasks);\n      this.setState({tasks:tasks});\n    }\n\n  render() {\n      var tasks;\n     if(this.state.taskType == 'all'){\n      tasks= this.alltask()\n      }\n     else if(this.state.taskType == true){\n          tasks = this.completedtask()\n      }\n    else {\n      tasks = this.activetask()\n      }\n    return (\n        <div className=\"title\">\n      <div >\n        <p className=\"header\">ToDo List App</p>\n        <p className=\"footer\">created by using React</p>\n      </div>\n      <div className=\"block\">\n        <input type=\"text\"\n                ref={(todo) => {this.inputTask = todo}}\n                placeholder=\"Enter the task\"\n                className=\"textInput\"\n                />\n        <p className=\"btn\" onClick={()=>{this.addTask()}}>+</p>\n      </div>\n      <div className=\"bar\">\n        <p className=\"tab\" onClick={()=>{this.setState({taskType: 'all'})}}>All</p>\n        <p className=\"tab\" onClick={()=>{this.setState({taskType: true})}}>Completed</p>\n        <p className=\"tab\" onClick={()=>{this.setState({taskType: false})}}>Active</p>\n      </div>\n      <div className=\"task-block\">\n      {tasks}\n      </div>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}