{"version":3,"sources":["components/Tasks.js","components/Checkbox.js","App.js","serviceWorker.js","index.js"],"names":["Tasks","react_default","a","createElement","className","this","props","task","title","Component","state","isChecked","checkBoxStatus","setState","type","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todo","tasks","target","value","newTask","isComplete","taskArray","push","_this2","onChange","updateTodo","placeholder","onClick","addTask","map","key","Checkbox","components_Tasks","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAgBeA,yLAXX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAGVC,KAAKC,MAAMC,KAAKC,cANPC,cCqBLT,6MApBXU,MAAQ,CACJC,WAAW,+EAGAC,GACTP,KAAKQ,SAAS,CAACF,UAAWC,qCAGhC,OACEX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOW,KAAK,WACFV,UAAU,oBAZNK,aC4DLM,cAxDX,SAAAA,EAAYT,GAAM,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAU,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhB,KAAMC,KACDI,MAAO,CACRY,KAAM,GACNC,MAAO,IAJGP,0EASPM,GACTjB,KAAKQ,SAAS,CAACS,KAAMA,EAAKE,OAAOC,0CAIjC,GAAGpB,KAAKK,MAAMY,KAAK,CACjB,IAAII,EAAU,CACZlB,MAAOH,KAAKK,MAAMY,KAClBK,YAAY,GAEZC,EAAYvB,KAAKK,MAAMa,MAAMM,KAAKH,GACtCrB,KAAKQ,SAAS,CAAES,KAAM,GAAIM,gDAKrB,IAAAE,EAAAzB,KACP,OACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACjBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,iBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,2BAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OACJiB,SAAU,SAAAT,GAAI,OAAIQ,EAAKE,WAAWV,IAClCG,MAAOpB,KAAKK,MAAMY,KAClBW,YAAY,iBACZ7B,UAAU,cAElBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAM8B,QAAS,WAAKJ,EAAKK,YAAtC,MAEFlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdC,KAAKK,MAAMa,MAAMa,IAAI,SAAC7B,EAAM8B,GAC3B,OAAOpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAOH,EAAAC,EAAAC,cAACmC,EAAD,CAAUD,IAAKA,EAAK9B,KAAMA,EAAMI,UAAWmB,EAAKpB,MAAMa,MAAMI,aAAlF,IAAgG1B,EAAAC,EAAAC,cAACoC,EAAD,CAAOF,IAAKA,EAAK9B,KAAMA,QAGhIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,OACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAb,aACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,mBAnDUK,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf490ebd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass Tasks extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"tasks\">\r\n      \r\n        \r\n          {this.props.task.title}\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tasks;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass Tasks extends Component {\r\n    state = {\r\n        isChecked: false,\r\n      }\r\n\r\n      updateStatus(checkBoxStatus) {\r\n          this.setState({isChecked: checkBoxStatus})\r\n      }\r\n  render() {\r\n    return (\r\n      <div>\r\n      <input type=\"checkbox\" \r\n                className=\"chk-box\" \r\n                //checked={this.state.isChecked}\r\n                //onChange={checkBoxStatus => this.updateStatus(checkBoxStatus)}\r\n                />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tasks;","import React, { Component } from 'react';\nimport Tasks from './components/Tasks';\nimport Checkbox from './components/Checkbox';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state= {\n            todo: '',\n            tasks: [\n            ],\n        }\n    }\n\n    updateTodo(todo) {\n      this.setState({todo: todo.target.value})\n    }\n\n    addTask() {\n      if(this.state.todo){\n        let newTask = {\n          title: this.state.todo,\n          isComplete: false,\n      } \n      let taskArray = this.state.tasks.push(newTask);\n      this.setState({ todo: '', taskArray });\n      //this.textInput.focus();\n      \n      }\n    }\n  render() {\n    return (\n        <div className=\"title\">\n      <div >\n        <p className=\"header\">ToDo List App</p>\n        <p className=\"footer\">created by using React</p>\n      </div>\n      <div className=\"block\">\n        <input type=\"text\"\n                onChange={todo => this.updateTodo(todo)}\n                value={this.state.todo}\n                placeholder=\"Enter the task\"\n                className=\"textInput\"\n                />\n        <p className=\"btn\" onClick={()=>{this.addTask()}}>+</p>\n      </div>\n      <div className=\"task-block\">\n      {this.state.tasks.map((task, key) => {\n        return <div className=\"task\"><Checkbox key={key} task={task} isChecked={this.state.tasks.isComplete}/> <Tasks key={key} task={task} /></div>\n      })}\n      </div>\n      <div className=\"tab-bar\">\n        <p className=\"all tab\">All</p>\n        <p className=\"completed tab\">Completed</p>\n        <p className=\"active tab\">Active</p>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}